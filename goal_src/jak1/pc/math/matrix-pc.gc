;;-*-Lisp-*-
(in-package goal)

;; Additional matrix utilities not in the original game

(defun transform-vector! ((out vector) (in vector) (mat matrix))
  "Transform a single vector. Sets w = 1."
  (rlet ((vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (acc :class vf)
         )
    (init-vf0-vector)
    ;; load vector
    (.lvf vf5 in)
    ;; load matrix vectors
    (.lvf vf1 (-> mat vector 0))
    (.lvf vf2 (-> mat vector 1))
    (.lvf vf3 (-> mat vector 2))
    (.lvf vf4 (-> mat vector 3))
    ;; transform
    (.mul.vf acc vf4 vf0)           ;; translation
    (.add.mul.x.vf acc vf1 vf5 acc) ;; x rotation
    (.add.mul.y.vf acc vf2 vf5 acc) ;; y rotation
    (.add.mul.z.vf acc vf3 vf5 acc) ;; z rotation
    ;; store result
    (.svf out acc)
    )
  out
  )
